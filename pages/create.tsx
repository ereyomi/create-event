import { EventT } from '@components/models/EventType';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { TiCamera } from 'react-icons/ti';

const Event: NextPage = () => {
  const router = useRouter();
  const [isEdit, setIsEdit] = useState<boolean>(false);
  const [eventName, setEventName] = useState<string>('');
  const [hostName, setHostName] = useState<string>('');
  const [startTime, setStartTime] = useState<string>('');
  const [endTime, setEndTime] = useState<string>('');
  const [location, setLocation] = useState<string>('');
  const [{ alt, src, isImageSet }, setImg] = useState<{
    alt: string;
    src: string;
    isImageSet: boolean;
  }>({
    src: '/assets/images/event-image.png',
    alt: 'Event img',
    isImageSet: false,
  });
  useEffect(() => {
    const existingData: EventT = JSON.parse(
      localStorage.getItem('event') || '{}'
    );
    if (existingData && existingData?.doEdit) {
      setIsEdit(true);
      setEventName(existingData?.eventName || '');
      setHostName(existingData?.hostName || '');
      setStartTime(existingData?.startTime || '');
      setEndTime(existingData?.endTime || '');
      setLocation(existingData?.location || '');
      setImg({
        alt: existingData?.location,
        src: existingData?.eventImage,
        isImageSet: true,
      });
    }
  }, []);
  const handleImg = (e: any) => {
    const files = e.target.files[0];
    if (files) {
      const fileReader = new FileReader();
      fileReader.addEventListener('load', function (ev: any) {
        setImg({
          alt: e.target.files[0]?.name || 'Event img',
          src: ev.target.result,
          isImageSet: true,
        });
      });
      fileReader.readAsDataURL(files);
    }
  };
  const addEvent = () => {
    try {
      localStorage.setItem(
        'event',
        JSON.stringify({
          eventName,
          hostName,
          startTime,
          endTime,
          location,
          eventImage: src,
          doEdit: false,
        })
      );
      router.push('/event');
    } catch (error) {
      alert(`Failed to add: ${error}`);
    }
  };
  return (
    <div className='w-full'>
      <Head>
        <title>Event</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='w-screen min-h-screen bg-[#FBFAFF] flex flex-col items-center p-5 md:py-[50px] lg:py-[88px] lg:px-[170px]'>
        <form className='w-full md:w-6/12 flex flex-col items-center gap-5 lg:flex-row lg:justify-between lg:w-full'>
          <p className='font-[700] text-4xl text-black-muted lg:hidden'>
            Create Event
          </p>
          <div className='w-[300px] h-[300px] md:w-[500px] md:h-[500px] overflow-hidden relative'>
            <Image
              src={src}
              alt={alt}
              width={150}
              height={150}
              layout='responsive'
              className='object-cover object-center'
            />
            <input
              type='file'
              className='absolute z-10 inset-0 opacity-0'
              accept='.png, .jpg, .jpeg'
              onChange={handleImg}
            />
            <div
              className={`${
                isImageSet ? 'bottom-1 left-1' : 'inset-0 z-1'
              } absolute bg-gray-muted/10 flex flex-col items-center justify-center`}
            >
              <TiCamera size={`${isImageSet ? '2em' : '6em'}`} color='#fff' />
              <p
                className={`${
                  isImageSet ? 'text-sm' : 'text-2xl'
                } font-[700]  text-[#fff]`}
              >
                {isImageSet ? 'Change picture' : 'Choose a picture'}
              </p>
            </div>
          </div>
          <div className='flex flex-col gap-[20px] w-full lg:max-w-[500px]'>
            <div className='w-full flex flex-col gap-[5px]'>
              <label
                htmlFor='eventName'
                className='w-full text-base font-[700] text-black-muted md:text-xl lg:text-2xl'
              >
                Event Name
              </label>
              <input
                type='text'
                name='eventName'
                id='eventName'
                className='w-full border border-black-muted bg-transparent rounded-lg outline-none p-2 md:p-3 lg:py-5 text-base md:text-xl lg:text-2xl'
                placeholder='e.g Birthday Events'
                value={eventName}
                onChange={(e) => setEventName(e.target.value)}
              />
            </div>
            <div className='w-full flex flex-col gap-[5px]'>
              <label
                htmlFor='hostName'
                className='w-full text-base font-[700] text-black-muted md:text-xl lg:text-2xl'
              >
                Host Name
              </label>
              <input
                type='text'
                name='hostName'
                id='hostName'
                className='w-full border border-black-muted bg-transparent rounded-lg outline-none p-2 md:p-3 lg:py-5 text-base md:text-xl lg:text-2xl'
                placeholder='e.g Elysia'
                value={hostName}
                onChange={(e) => setHostName(e.target.value)}
              />
            </div>
            <div className='w-full flex flex-col gap-[5px]'>
              <label
                htmlFor='startTime'
                className='w-full text-base font-[700] text-black-muted md:text-xl lg:text-2xl'
              >
                Start Time
              </label>
              <input
                type='datetime-local'
                name='startTime'
                id='startTime'
                className='w-full border border-black-muted bg-transparent rounded-lg outline-none p-2 md:p-3 lg:py-5 text-base md:text-xl lg:text-2xl'
                pattern='[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}'
                value={startTime}
                onChange={(e) => setStartTime(e.target.value)}
              />
            </div>
            <div className='w-full flex flex-col gap-[5px]'>
              <label
                htmlFor='endTime'
                className='w-full text-base font-[700] text-black-muted md:text-xl lg:text-2xl'
              >
                End Time
              </label>
              <input
                type='datetime-local'
                name='endTime'
                id='endTime'
                className='w-full border border-black-muted bg-transparent rounded-lg outline-none p-2 md:p-3 lg:py-5 text-base md:text-xl lg:text-2xl'
                pattern='[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}'
                value={endTime}
                onChange={(e) => setEndTime(e.target.value)}
              />
            </div>
            <div className='w-full flex flex-col gap-[5px]'>
              <label
                htmlFor='location'
                className='w-full text-base font-[700] text-black-muted md:text-xl lg:text-2xl'
              >
                Location
              </label>
              <input
                type='text'
                name='location'
                id='location'
                className='w-full border border-black-muted bg-transparent rounded-lg outline-none p-2 md:p-3 lg:py-5 text-base md:text-xl lg:text-2xl'
                placeholder='e.g lagos, Nigeria'
                value={location}
                onChange={(e) => setLocation(e.target.value)}
              />
            </div>
            <div className='w-full flex items-center justify-center'>
              <button
                onClick={() => addEvent()}
                type='button'
                className='bg-linear-mute rounded-[10px] px-[21px] md:px-[69.5px] py-[16px] text-[#fff] text-base font-[700] md:text-xl'
              >
                ðŸŽ‰ {isEdit ? 'Update event' : 'Create event'}
              </button>
            </div>
          </div>
        </form>
      </main>
    </div>
  );
};

export default Event;
